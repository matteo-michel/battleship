@page "/game"
@using BattleShip.Models.DTO.Output;
@using BattleShip.Models.DTO.Input;
@using System.Text.Json
@using System.Text.Json.Serialization
@using BattleShip.Models.DTO.Output
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http



<link rel="stylesheet" href="css/grid.css">
<link rel="stylesheet" href="css/gameInfo.css">


@if (grid is null){
    <p>Loading...</p>
  }
  else{
@if(status){
  <p>FIN DE LA GAME</p>
}

<div class="main">

  <div class="map mapPlayer">

<div class="gridPlayer mapGrid">
    @for (int i = 0; i < 10; i++)
    {
        @for (int j = 0; j < 10; j++)
        {
          int row = i;
          int col = j;
          string data = grid[row,col];
          if(ennemyPlays[row,col] != null){
            <div  class="cell @(ennemyPlays[row,col].Hit ? "hit" : ennemyPlays[row,col] != null ? "miss" : "") @(IsBorderCell(row, col, 10) ? "isBorder" : "")"></div>
          }else{
            <div  class="cell @(IsBorderCell(row, col, 10) ? "isBorder" : "")"></div>
          }

        }
    }
</div>

</div>

  <div class="map">

<p class="nickname">Your ennemy</p>
<div class="grid">
    @for (int i = 0; i < 10; i++)
    {
        @for (int j = 0; j < 10; j++)
        {
          int row = i;
          int col = j;
          string ennemyData;
          if(ennemyGrid[row, col] == true){
            ennemyData = "O";
          }else if(ennemyGrid[row, col] == false){
            ennemyData = "X";
          }else{
            ennemyData = "";
          }
          <div @onclick="()=>ButtonPressed(row,col)" class="cell @(ennemyData == "O" ? "hit" : ennemyData == "X" ? "miss": "")"></div>
        }
    }

</div>

<p class="nickname">You</p>
</div>

<GameInfo />

</div>
    }


@code{
    private string[,] grid = new string[10,10];
    private bool?[,] ennemyGrid = new bool?[10,10];
    private bool getBranchesError;
    private bool shouldRender;
    private WarOutput gameResponse;
    private AiBlastOutput[,] ennemyPlays = new AiBlastOutput[10,10];
    private bool status;

    protected override bool ShouldRender() => shouldRender;


    public bool IsBorderCell(int row, int col, int gridSize)
{
    // Check if the cell is on the top or bottom border
    if (row == 0 || row == gridSize - 1)
    {
        return true;
    }

    // Check if the cell is on the left or right border
    if (col == 0 || col == gridSize - 1)
    {
        return true;
    }

    // If the cell is not on any border
    return false;
}

    protected async void ButtonPressed(int row, int col){
    var requestData = new BlastInput { PosX = row, PosY = col };

    // Serialize the object to JSON
    var jsonRequest = JsonSerializer.Serialize(requestData);
    
    // Create a StringContent with the serialized JSON
    var content = new StringContent(jsonRequest, System.Text.Encoding.UTF8, "application/json");
    
    // Send the POST request
    var response = await Http.PostAsync($"http://localhost:5023/war/blast/{gameResponse.Id}", content);
    
    // Check if the response is successful
    if (response.IsSuccessStatusCode)
    {
        // Deserialize the JSON response into WarOutput object
        BlastOutput blastData = await response.Content.ReadFromJsonAsync<BlastOutput>();
        ennemyGrid[row, col] = blastData.Hit;
        ennemyPlays[blastData.AiBlast.X, blastData.AiBlast.Y] = blastData.AiBlast; 
        status = blastData.Over;

        StateHasChanged();
    }
    else
    {
        // Handle the case when the response is not successful
        getBranchesError = true;
        Console.WriteLine($"Error: {response.StatusCode}");
    }

      }

    protected override async Task OnInitializedAsync()
    {
        gameResponse = await Http.GetFromJsonAsync<WarOutput>("http://localhost:5023/war");
        
        foreach (var ship in gameResponse.Ships)
        {
            foreach (var position in ship.Positions)
            {
                int row = position[0];
                int col = position[1];
                grid[row, col] = ship.Letter;
            }
        }
 

        shouldRender = true;
    }




  }
