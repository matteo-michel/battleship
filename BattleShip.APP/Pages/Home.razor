@page "/game/{DifficultyLevel}/{IsPlaced}"
@using BattleShip.Models.DTO.Output;
@using BattleShip.Models.DTO.Input;
@using BattleShip.Models.DTO.Enum;
@using System.Text.Json
@using System.Text.Json.Serialization
@using BattleShip.Models.DTO.Output
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject LeaderBoardService.LeaderBoardServiceClient LeaderBoardClient

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]



<link rel="stylesheet" href="css/grid.css">
<link rel="stylesheet" href="css/gameInfo.css">


<AuthorizeView>
  <Authorized>
    @{
      Pseudo = @context.User.Identity.Name;
    }
    @if (grid is null)
    {
      <p>Loading...</p>
    }
    else
    {



      @if (status)
      {
        <p>FIN DE LA GAME</p>
      }


      if (PlaceShips)
      {

        <div class="main">


          <div class="map">

            <p class="nickname">Place your ships !</p>
            <p>@gridSizes</p>
            <div class="@(gridSizes == 10 ? "grid":"gridEasy")">

              @for (int i = 0; i < gridSizes; i++)
              {
                @for (int j = 0; j < gridSizes; j++)
                {
                  int row = i;
                  int col = j;
                  string data = grid[row, col];

                  <div @onclick="()=>UpdateGrid(row,col)"
                    class="cell @(IsBorderCell(row, col, 8) ? "isBorder" : "") @(data != null ? "ship" : "")"></div>

                }
              }
            </div>

            <p class="nickname">You</p>
          </div>

          <div>

            @for (int i = 0; i < 5; i++)
            {
              int index = i;
              <div>
                <p class="textPlace">Ship @(index + 1)</p>
                <button class="buttonPlace" @onclick="()=>HandlePlacement(index+1,0)">Vertical</button>
                <button class="buttonPlace" @onclick="()=>HandlePlacement(index+1,1)">Horizontal</button>
              </div>

            }
            <button @onclick="()=>HandleSave()" class="buttonPlace marginPlace">Save</button>
          </div>

        </div>

      }
      else
      {

        <div class="main">

          <div class="map mapPlayer">

            <div class="@(gridSizes == 10 ? "gridPlayer" : "gridPlayerEasy") mapGrid">
              @if (preview is null)
              {

                @for (int i = 0; i < gridSizes; i++)
                {
                  @for (int j = 0; j < gridSizes; j++)
                  {
                    int row = i;
                    int col = j;
                    string data = grid[row, col];

                    Console.WriteLine(data);
                    if (ennemyPlays[row, col] != null)
                    {
                      <div
                        class="cell @(ennemyPlays[row,col].Hit ? "hit" : ennemyPlays[row,col] != null ? "miss" : "") @(IsBorderCell(row, col, 10) ? "isBorder" : "")">
                      </div>
                    }
                    else
                    {
                      <div class="cell @(IsBorderCell(row, col, 10) ? "isBorder" : "") @(data != null ? "ship" : "")"></div>
                    }

                  }
                }       }
              else
              {


                @for (int i = 0; i < gridSizes; i++)
                {
                  @for (int j = 0; j < gridSizes; j++)
                  {
                    int row = i;
                    int col = j;
                    var data = preview.AllySea.Hits.FirstOrDefault(h => h.X == row && h.Y == col);

                    string ships = grid[row, col];
                    if (data != null)
                    {
                      <div class="cell @(data.Reached ? "hit" :  "miss" ) @(IsBorderCell(row, col, 10) ? "isBorder" : "")"></div>
                    }
                    else
                    {
                      <div class="cell @(IsBorderCell(row, col, 10) ? "isBorder" : "") @(ships != null ? "ship":"")"></div>
                    }

                  }
                }
              }
            </div>

          </div>

          <div class="map">

            <p class="nickname">Your ennemy</p>
            <div class="@(gridSizes == 10 ? "grid":"gridEasy")">

              @if (preview is null)
              {




                @for (int i = 0; i < gridSizes; i++)
                {
                  @for (int j = 0; j < gridSizes; j++)
                  {
                    int row = i;
                    int col = j;
                    string ennemyData;

                    if (ennemyGrid[row, col] == true)
                    {
                      ennemyData = "O";
                    }
                    else if (ennemyGrid[row, col] == false)
                    {
                      ennemyData = "X";
                    }
                    else
                    {
                      ennemyData = "";
                    }
                    <div @onclick="()=>ButtonPressed(row,col)"
                      class="cell @(ennemyData == "O" ? "hit" : ennemyData == "X" ? "miss": "")"></div>
                  }
                }
              }
              else
              {

                @for (int i = 0; i < gridSizes; i++)
                {
                  @for (int j = 0; j < gridSizes; j++)
                  {
                    int row = i;
                    int col = j;
                    string ennemyData;

                    var data = preview.EnemySea.Hits.FirstOrDefault(h => h.X == row && h.Y == col);
                    if (ennemyGrid[row, col] == true)
                    {
                      ennemyData = "O";
                    }
                    else if (ennemyGrid[row, col] == false)
                    {
                      ennemyData = "X";
                    }
                    else
                    {
                      ennemyData = "";
                    }
                    if (data != null)
                    {
                      <div class="cell @(data.Reached ? "hit" : "miss")"></div>
                    }
                    else
                    {

                      <div class="cell "></div>
                    }

                  }
                }

              }
            </div>

            <p class="nickname">You</p>
          </div>

          <GameInfo CallbackFunction=@CallbackMethod gameId=@gameResponse.Id @key=@history history=@history />

        </div>


      }
    }

  </Authorized>
</AuthorizeView>


@code {
  private string[,] grid;
  private bool?[,] ennemyGrid;
  private bool getBranchesError;
  private bool shouldRender;
  private WarOutput gameResponse;
  private AiBlastOutput[,] ennemyPlays;
  private bool status;
  public WarHistoryOutput history;
  public WarHistoryOutput preview;
  private int score = 100;
  private int placementDirection; // 0 = vertical 1 = horizontal
  private int placementNumber = 1;

  private ShipInput[] newPlacement = new ShipInput[5];

  [Parameter]
  public string DifficultyLevel { get; set; }

  [Parameter]
  public string IsPlaced { get; set; }

  private int gridSizes;

  private bool PlaceShips;
  public string Pseudo;

  protected override bool ShouldRender() => shouldRender;


  private async void HandleSave()
  {


    // Serialize the object to JSON
    var fleetInput = new FleetInput { Ships = newPlacement.ToList() };
    var jsonRequest = JsonSerializer.Serialize(fleetInput);


    // Create a StringContent with the serialized JSON
    var content = new StringContent(jsonRequest, System.Text.Encoding.UTF8, "application/json");

    // Send the POST request
    var response = await Http.PutAsync($"fleet/{gameResponse.Id}", content);

    if (response.IsSuccessStatusCode)
    {
      PlaceShips = false;
      StateHasChanged();
    }
  }

  private void HandlePlacement(int number, int direction)
  {
    placementDirection = direction;
    placementNumber = number;
  }


  private void DeleteExistingCells(string letter)
  {
    int gridSize = gridSizes; // Assuming a 10x10 grid

    // Iterate through all cells in the grid
    for (int row = 0; row < gridSize; row++)
    {
      for (int col = 0; col < gridSize; col++)
      {
        // Check if the cell contains the specified letter
        if (grid[row, col] == letter)
        {
          // Remove the letter from the cell
          grid[row, col] = null;
        }
      }
    }

  }


  private void UpdateGrid(int startX, int startY)
  {
    int gridSize = gridSizes;

    // Define the direction offsets
    int rowOffset = placementDirection == 0 ? 1 : 0;
    int colOffset = placementDirection == 0 ? 0 : 1;

    // Define the number of cells to update in the chosen direction
    int cellsToUpdate = placementNumber;

    string letter;
    if (placementNumber == 1)
    {
      letter = "A";
    }
    else if (placementNumber == 2)
    {
      letter = "B";
    }
    else if (placementNumber == 3)
    {
      letter = "C";
    }
    else if (placementNumber == 4)
    {
      letter = "D";
    }
    else
    {
      letter = "E";
    }

    DeleteExistingCells(letter);

    List<(int, int, string)> originalValues = new List<(int, int, string)>();
    int[][] pos = new int[placementNumber][];

    bool isCanceled = true;

    // Update the grid
    for (int i = 0; i < cellsToUpdate; i++)
    {
      int row = startX + i * rowOffset;
      int col = startY + i * colOffset;


      if (row >= 0 && row < gridSize && col >= 0 && col < gridSize && string.IsNullOrEmpty(grid[row, col]))
      {

        originalValues.Add((row, col, grid[row, col]));

        // Update the grid cell value at the specified position
        grid[row, col] = letter; 

        pos[i] = new int[] { row, col };
        isCanceled = false;

      }
      else
      {

        // Revert
        foreach (var (r, c, value) in originalValues)
        {
          grid[r, c] = value;
        }

        isCanceled = true;
        break;

      }

      if (!isCanceled)
      {

        newPlacement[placementNumber - 1] = new ShipInput
          {
            Letter = letter[0],
            Size = placementNumber,
            Orientation =
          placementDirection == 0 ? 'V' : 'H',
            Positions = pos
          };

      }
    }
  }


  private async void CallbackMethod(int wave)
  {


    if (wave == -1)
    {
      preview = null;
    }
    else
    {

      Console.WriteLine($"WAVE : {wave}");
      var historyResponse = await
      Http.GetFromJsonAsync<WarHistoryOutput>($"war/history/{gameResponse.Id}?wave={wave}");


      // Store history data in a variable named history
      preview = historyResponse;

    }

    StateHasChanged(); // Ensure the component re-renders after data is fetched
  }

  public bool IsBorderCell(int row, int col, int gridSize)
  {
    // Check if the cell is on the top or bottom border
    if (row == 0 || row == gridSize - 1)
    {
      return true;
    }

    // Check if the cell is on the left or right border
    if (col == 0 || col == gridSize - 1)
    {
      return true;
    }

    // If the cell is not on any border
    return false;
  }

  protected async Task GetHistory()
  {

    // Make the HTTP request to get history data
    var historyResponse = await
    Http.GetFromJsonAsync<WarHistoryOutput>($"war/history/{gameResponse.Id}");


    Console.WriteLine(historyResponse.AllySea.Hits.Count);

    history = historyResponse;
    preview = null;
    StateHasChanged(); 
  }


  protected async void ButtonPressed(int row, int col)
  {
    score--;
    var requestData = new BlastInput { PosX = row, PosY = col };

    // Serialize the object to JSON
    var jsonRequest = JsonSerializer.Serialize(requestData);

    // Create a StringContent with the serialized JSON
    var content = new StringContent(jsonRequest, System.Text.Encoding.UTF8, "application/json");

    // Send the POST request
    var response = await Http.PostAsync($"war/blast/{gameResponse.Id}", content);

    // Check if the response is successful
    if (response.IsSuccessStatusCode)
    {

      BlastOutput blastData = await response.Content.ReadFromJsonAsync<BlastOutput>();
      ennemyGrid[row, col] = blastData.Hit;
      ennemyPlays[blastData.AiBlast.X, blastData.AiBlast.Y] = blastData.AiBlast;
      status = blastData.Over;
      if (status)
      {

        var responseLeader = await LeaderBoardClient.AddLeaderBoardAsync(new LeaderBoard
          {
            Id = Pseudo,
            Name = Pseudo,
            Score =
          score
          });

      }


      GetHistory();
      StateHasChanged();
    }
    else
    {
      // Handle the case when the response is not successful
      Console.WriteLine($"Error: {response.StatusCode}");
    }

  }

  protected override async Task OnInitializedAsync()
  {

    gridSizes = DifficultyLevel == "hard" ? 10 : 8;
    grid = new string[gridSizes, gridSizes];
    ennemyGrid = new bool?[gridSizes, gridSizes];
    ennemyPlays = new AiBlastOutput[gridSizes, gridSizes];


    if (IsPlaced == "True")
    {
      PlaceShips = true;
    }
    else
    {
      PlaceShips = false;
    }

    var requestData = new WarInput { Difficulty = DifficultyLevel == "hard" ? Difficulty.Hard : Difficulty.Easy };

    var jsonRequest = JsonSerializer.Serialize(requestData);

    var content = new StringContent(jsonRequest, System.Text.Encoding.UTF8, "application/json");

    var response = await Http.PostAsync("war", content);

    gameResponse = await response.Content.ReadFromJsonAsync<WarOutput>();
    Console.WriteLine(gameResponse.Id);

    foreach (var ship in gameResponse.Ships)
    {
      foreach (var position in ship.Positions)
      {
        int row = position.X;
        int col = position.Y;

        if (PlaceShips == false)
        {

          grid[row, col] = ship.Letter;
        }
      }
    }



    shouldRender = true;
  }




}
