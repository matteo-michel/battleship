@page "/"
@using BattleShip.Models;
@using System.Text.Json
@using System.Text.Json.Serialization
@using BattleShip.Models.DTO.Output
@inject IHttpClientFactory ClientFactory

<style>
    .main {
        display: flex;
        flex-direction : row;
        gap: 50px;
      }
    .grid {
        display: grid;
        grid-template-columns: repeat(10, 50px);
        grid-template-rows: repeat(10, 50px);
        gap: 2px;
        border: 1px solid #000;
        padding: 0%;
        margin: 0%;
    }
    .cell {
        background-color: #fff;
        border: 1px solid #000;
        text-align: center;
        line-height: 50px;
        margin : 0%;
        padding: 0%;
    }
</style>

<h1>Bataille navale</h1>

<div class="main">
@if (grid is null){
    <p>Loading...</p>
  }
  else{
<div class="grid">
    @for (int i = 0; i < 10; i++)
    {
        @for (int j = 0; j < 10; j++)
        {
          int row = i;
          int col = j;
          string data = grid[row,col];
            <div class="cell">@data</div>
        }
    }
</div>

<div class="grid">
    @for (int i = 0; i < 10; i++)
    {
        @for (int j = 0; j < 10; j++)
        {
          int row = i;
                        int col = j;
            <div @onclick="()=>ButtonPressed(row,col)" class="cell"></div>
        }
    }
</div>



    }
</div>


@code{
       private string[,] grid = new string[10,10];
    private bool getBranchesError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected void ButtonPressed(int row, int col){
        Console.WriteLine($"{row} {col}");
      }

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Post,
            "http://localhost:5023/war");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
 using var responseStream = await response.Content.ReadAsStreamAsync();
        
         // Deserialize the response content as a jagged array of strings
        WarOutput gameResponse = await JsonSerializer.DeserializeAsync<WarOutput>(responseStream);
 foreach (var ship in gameResponse.Ships)
        {
            foreach (var position in ship.Positions)
            {
                int row = position[0];
                int col = position[1];
                grid[row, col] = ship.Letter;
            }
        }
 
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }




  }
